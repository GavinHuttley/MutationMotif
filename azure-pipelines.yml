trigger:
  - master

variables:
  CODECOV_TOKEN: 655fb974-50d3-4219-8622-24671339d710
  CIBW_BUILD: cp36-* cp37-* cp38-*
  CIBW_BEFORE_BUILD: python -m pip install --upgrade pip

jobs:
- job: UbuntuTest
  displayName: Test
  strategy:
    matrix:
      UbuntuPython36:
        displayName: Ubuntu Python 3.6
        imageName: 'ubuntu-latest'
        python.version: '3.6'
        tox.envname: 'py36'
      UbuntuPython37:
        displayName: Ubuntu Python 3.7
        imageName: 'ubuntu-latest'
        python.version: '3.7'
        tox.envname: 'py37'
      #UbuntuPython38:
      #  displayName: Ubuntu Python 3.8
      #  imageName: 'ubuntu-latest'
      #  python.version: '3.8'
      #  tox.envname: 'py38'
      MacOSPython36:
        displayName: MacOS Python 3.6
        imageName: 'macos-latest'
        python.version: '3.6'
        tox.envname: 'py36'
      MacOSPython37:
        displayName: MacOS Python 3.7
        imageName: 'macos-latest'
        python.version: '3.7'
        tox.envname: 'py37'
      #MacOSPython38:
      #  displayName: MacOS Python 3.8
      #  imageName: 'macos-latest'
      #  python.version: '3.8'
      #  tox.envname: 'py38'
      WindowsPython36:
        displayName: Windows Python 3.6
        imageName: 'windows-latest'
        python.version: '3.6'
        tox.envname: 'py36'
      WindowsPython37:
        displayName: Windows Python 3.7
        imageName: 'windows-latest'
        python.version: '3.7'
        tox.envname: 'py37'
      #WindowsPython38:
      #  displayName: Windows Python 3.8
      #  imageName: 'windows-latest'
      #  python.version: '3.8'
      #  tox.envname: 'py38'
  pool:
    vmImage: $(imageName)
  steps:
  - bash: echo "##vso[task.prependpath]$CONDA/bin"
    displayName: Add conda to PATH

  - bash: conda create --yes --quiet --name myEnvironment
    displayName: Create Anaconda environment

  - bash: |
      source activate myEnvironment
      conda install --yes --quiet --name myEnvironment python=$PYTHON_VERSION
      conda install --yes --quiet --name myEnvironment -c plotly plotly-orca rpy2 pytest
    displayName: Install Anaconda packages
  - bash: |
      source activate myEnvironment
      pip install --upgrade pip
      pip install .[dev] tox codecov
      tox -e $(tox.envname)
      codecov
    displayName: Test Python $(python.version)
  - task: PublishTestResults@2
    condition: succeededOrFailed()
    inputs:
      testResultsFiles: '**/junit-*.xml'
      testRunTitle: 'Publish test results for Linux Python $(python.version)'
      failTaskOnFailedTests: true

- job: BuildUbuntuWheels
  displayName: Build Ubuntu Wheels
  pool: {vmImage: 'ubuntu-latest'}
  steps: 
    - {task: UsePythonVersion@0, inputs: {versionSpec: '3.6'}}
    - {task: UsePythonVersion@0, inputs: {versionSpec: '3.7'}}
    - {task: UsePythonVersion@0, inputs: {versionSpec: '3.8'}}
    - bash: |
        python -m pip install --upgrade pip
        python -m pip install cibuildwheel
        cibuildwheel --output-dir wheelhouse .
        python setup.py sdist
        cp dist/*.gz wheelhouse/.
    - task: PublishBuildArtifacts@1
      inputs: {pathtoPublish: 'wheelhouse'}

- job: BuildMacOSWheels
  displayName: Build MacOS Wheels
  pool: {vmImage: 'macos-latest'}
  steps: 
    - {task: UsePythonVersion@0, inputs: {versionSpec: '3.6'}}
    - {task: UsePythonVersion@0, inputs: {versionSpec: '3.7'}}
    - {task: UsePythonVersion@0, inputs: {versionSpec: '3.8'}}
    - bash: |
        python -m pip install --upgrade pip
        python -m pip install cibuildwheel
        cibuildwheel --output-dir wheelhouse .
    - task: PublishBuildArtifacts@1
      inputs: {pathtoPublish: 'wheelhouse'}

- job: BuildWindowsWheels
  displayName: Build Windows Wheels
  pool: {vmImage: 'windows-latest'}
  steps:
    - {task: UsePythonVersion@0, inputs: {versionSpec: '3.6', architecture: x86}}
    - {task: UsePythonVersion@0, inputs: {versionSpec: '3.6', architecture: x64}}
    - {task: UsePythonVersion@0, inputs: {versionSpec: '3.7', architecture: x86}}
    - {task: UsePythonVersion@0, inputs: {versionSpec: '3.7', architecture: x64}}
    - {task: UsePythonVersion@0, inputs: {versionSpec: '3.8', architecture: x86}}
    - {task: UsePythonVersion@0, inputs: {versionSpec: '3.8', architecture: x64}}
    - bash: |
        python -m pip install --upgrade pip
        python -m pip install cibuildwheel
        cibuildwheel --output-dir wheelhouse .
    - task: PublishBuildArtifacts@1
      inputs: {pathtoPublish: 'wheelhouse'}
